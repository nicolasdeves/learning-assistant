generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  activities  Activity[]
  topicUser   TopicUser[]
  communities Community[]
  notifications Notification[]

  @@map("topic")
}

enum LevelEnum {
  beginner
  intermediate
  advanced
}
model TopicUser {
  id           Int    @id @default(autoincrement())
  googleUserId String @map("google_user_id")
  topicId      Int    @map("topic_id")
  level        LevelEnum

  topic Topic @relation(fields: [topicId], references: [id])

  @@map("topic_user")
}

model Activity {
  id      Int      @id @default(autoincrement())
  name    String
  date    DateTime
  googleUserId  Int      @map("google_user_id")
  topicId Int      @map("topic_id")

  conclusion String? // user conclusion (IA)
  positive   String? //positive points (IA)
  negative   String? //negative points (IA)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercises Exercise[]

  topic Topic @relation(fields: [topicId], references: [id])

  @@map("activity")
}

model Exercise {
  id             Int       @id @default(autoincrement())
  exerciseTypeId Int       @map("exercise_type_id")
  activityId     Int       @map("activity_id")
  name           String
  description    String
  finishedAt     DateTime? @map("finished_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  exerciseType ExerciseType  @relation(fields: [exerciseTypeId], references: [id])
  activity     Activity      @relation(fields: [activityId], references: [id])
  alternatives Alternative[]
  answers      Answer[]

  @@map("exercise")
}

model ExerciseType {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  exercises Exercise[]

  @@map("exercise_type")
}

model Alternative {
  id          Int      @id @default(autoincrement())
  exerciseId  Int      @map("exercise_id")
  description String
  isCorrect   Boolean  @map("is_correct")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("alternative")
}

model Answer {
  id          Int      @id @default(autoincrement())
  exerciseId  Int      @map("exercise_id")
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("answer")
}

model Community {
  id        Int      @id @default(autoincrement())
  name      String
  topicId   Int      @map("topic_id")
  createdAt DateTime @default(now()) @map("created_at")

  topic          Topic           @relation(fields: [topicId], references: [id])
  communityUsers CommunityUser[]
}

model CommunityUser {
  id           Int    @id @default(autoincrement())
  googleUserId String @map("google_user_id")
  communityId  Int    @map("community_id")

  community Community @relation(fields: [communityId], references: [id])
  messages  Message[]
}

model Message {
  id              Int    @id @default(autoincrement())
  content         String
  communityUserId Int

  communityUser CommunityUser @relation(fields: [communityUserId], references: [id])
}

model Notification {
  id           Int      @id @default(autoincrement())
  content      String
  googleUserId String   @map("google_user_id")
  topicId Int
  date         DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  topic Topic @relation(fields: [topicId], references: [id])
}
